<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.juma.tgm.task.dao.TaskParamMapper">
  <resultMap id="BaseResultMap" type="com.juma.tgm.task.domain.TaskParam">
    <id column="param_id" jdbcType="INTEGER" property="paramId" />
    <result column="task_id" jdbcType="INTEGER" property="taskId" />
    <result column="bill_period" jdbcType="INTEGER" property="billPeriod" />
    <result column="goods_type" jdbcType="VARCHAR" property="goodsType" />
    <result column="estimate_mileage_range" jdbcType="VARCHAR" property="estimateMileageRange" />
    <result column="estimate_time_cost_range" jdbcType="VARCHAR" property="estimateTimeCostRange" />
    <result column="function_ids" jdbcType="VARCHAR" property="functionIds" />
    <result column="require_mark" jdbcType="VARCHAR" property="requireMark" />
    <result column="pricing_method" jdbcType="INTEGER" property="pricingMethod" />
    <result column="pricing_rule" jdbcType="VARCHAR" property="pricingRule" />
    <result column="cancel_reason" jdbcType="VARCHAR" property="cancelReason" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.singleValue and !criterion.noValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
                <when test="criterion.likeListValue">
                  and
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator="or">
                    ${criterion.condition} concat(#{listItem},'%')
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.singleValue and !criterion.noValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
                <when test="criterion.likeListValue">
                  and
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator="or">
                    ${criterion.condition} concat(#{listItem},'%')
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    param_id, task_id, bill_period, goods_type, estimate_mileage_range, estimate_time_cost_range, 
    function_ids, require_mark, pricing_method, pricing_rule, cancel_reason
  </sql>
  <select id="selectByExample" parameterType="com.juma.tgm.task.domain.TaskParamExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from task_param
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="startOffSet != null and startOffSet>=0">
      limit ${startOffSet} , ${size}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from task_param
    where param_id = #{paramId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from task_param
    where param_id = #{paramId,jdbcType=INTEGER}
  </delete>
  <select id="countByExample" parameterType="com.juma.tgm.task.domain.TaskParamExample" resultType="java.lang.Long">
    select count(*) from task_param
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <insert id="insert" keyColumn="param_id" keyProperty="paramId" parameterType="com.juma.tgm.task.domain.TaskParam" useGeneratedKeys="true">
    insert into task_param (task_id, bill_period, goods_type, 
      estimate_mileage_range, estimate_time_cost_range, 
      function_ids, require_mark, pricing_method, 
      pricing_rule, cancel_reason)
    values (#{taskId,jdbcType=INTEGER}, #{billPeriod,jdbcType=INTEGER}, #{goodsType,jdbcType=VARCHAR}, 
      #{estimateMileageRange,jdbcType=VARCHAR}, #{estimateTimeCostRange,jdbcType=VARCHAR}, 
      #{functionIds,jdbcType=VARCHAR}, #{requireMark,jdbcType=VARCHAR}, #{pricingMethod,jdbcType=INTEGER}, 
      #{pricingRule,jdbcType=VARCHAR}, #{cancelReason,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="param_id" keyProperty="paramId" parameterType="com.juma.tgm.task.domain.TaskParam" useGeneratedKeys="true">
    insert into task_param
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="taskId != null">
        task_id,
      </if>
      <if test="billPeriod != null">
        bill_period,
      </if>
      <if test="goodsType != null">
        goods_type,
      </if>
      <if test="estimateMileageRange != null">
        estimate_mileage_range,
      </if>
      <if test="estimateTimeCostRange != null">
        estimate_time_cost_range,
      </if>
      <if test="functionIds != null">
        function_ids,
      </if>
      <if test="requireMark != null">
        require_mark,
      </if>
      <if test="pricingMethod != null">
        pricing_method,
      </if>
      <if test="pricingRule != null">
        pricing_rule,
      </if>
      <if test="cancelReason != null">
        cancel_reason,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="taskId != null">
        #{taskId,jdbcType=INTEGER},
      </if>
      <if test="billPeriod != null">
        #{billPeriod,jdbcType=INTEGER},
      </if>
      <if test="goodsType != null">
        #{goodsType,jdbcType=VARCHAR},
      </if>
      <if test="estimateMileageRange != null">
        #{estimateMileageRange,jdbcType=VARCHAR},
      </if>
      <if test="estimateTimeCostRange != null">
        #{estimateTimeCostRange,jdbcType=VARCHAR},
      </if>
      <if test="functionIds != null">
        #{functionIds,jdbcType=VARCHAR},
      </if>
      <if test="requireMark != null">
        #{requireMark,jdbcType=VARCHAR},
      </if>
      <if test="pricingMethod != null">
        #{pricingMethod,jdbcType=INTEGER},
      </if>
      <if test="pricingRule != null">
        #{pricingRule,jdbcType=VARCHAR},
      </if>
      <if test="cancelReason != null">
        #{cancelReason,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByExampleSelective" parameterType="map">
    update task_param
    <set>
      <if test="record.paramId != null">
        param_id = #{record.paramId,jdbcType=INTEGER},
      </if>
      <if test="record.taskId != null">
        task_id = #{record.taskId,jdbcType=INTEGER},
      </if>
      <if test="record.billPeriod != null">
        bill_period = #{record.billPeriod,jdbcType=INTEGER},
      </if>
      <if test="record.goodsType != null">
        goods_type = #{record.goodsType,jdbcType=VARCHAR},
      </if>
      <if test="record.estimateMileageRange != null">
        estimate_mileage_range = #{record.estimateMileageRange,jdbcType=VARCHAR},
      </if>
      <if test="record.estimateTimeCostRange != null">
        estimate_time_cost_range = #{record.estimateTimeCostRange,jdbcType=VARCHAR},
      </if>
      <if test="record.functionIds != null">
        function_ids = #{record.functionIds,jdbcType=VARCHAR},
      </if>
      <if test="record.requireMark != null">
        require_mark = #{record.requireMark,jdbcType=VARCHAR},
      </if>
      <if test="record.pricingMethod != null">
        pricing_method = #{record.pricingMethod,jdbcType=INTEGER},
      </if>
      <if test="record.pricingRule != null">
        pricing_rule = #{record.pricingRule,jdbcType=VARCHAR},
      </if>
      <if test="record.cancelReason != null">
        cancel_reason = #{record.cancelReason,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update task_param
    set param_id = #{record.paramId,jdbcType=INTEGER},
      task_id = #{record.taskId,jdbcType=INTEGER},
      bill_period = #{record.billPeriod,jdbcType=INTEGER},
      goods_type = #{record.goodsType,jdbcType=VARCHAR},
      estimate_mileage_range = #{record.estimateMileageRange,jdbcType=VARCHAR},
      estimate_time_cost_range = #{record.estimateTimeCostRange,jdbcType=VARCHAR},
      function_ids = #{record.functionIds,jdbcType=VARCHAR},
      require_mark = #{record.requireMark,jdbcType=VARCHAR},
      pricing_method = #{record.pricingMethod,jdbcType=INTEGER},
      pricing_rule = #{record.pricingRule,jdbcType=VARCHAR},
      cancel_reason = #{record.cancelReason,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.juma.tgm.task.domain.TaskParam">
    update task_param
    <set>
      <if test="taskId != null">
        task_id = #{taskId,jdbcType=INTEGER},
      </if>
      <if test="billPeriod != null">
        bill_period = #{billPeriod,jdbcType=INTEGER},
      </if>
      <if test="goodsType != null">
        goods_type = #{goodsType,jdbcType=VARCHAR},
      </if>
      <if test="estimateMileageRange != null">
        estimate_mileage_range = #{estimateMileageRange,jdbcType=VARCHAR},
      </if>
      <if test="estimateTimeCostRange != null">
        estimate_time_cost_range = #{estimateTimeCostRange,jdbcType=VARCHAR},
      </if>
      <if test="functionIds != null">
        function_ids = #{functionIds,jdbcType=VARCHAR},
      </if>
      <if test="requireMark != null">
        require_mark = #{requireMark,jdbcType=VARCHAR},
      </if>
      <if test="pricingMethod != null">
        pricing_method = #{pricingMethod,jdbcType=INTEGER},
      </if>
      <if test="pricingRule != null">
        pricing_rule = #{pricingRule,jdbcType=VARCHAR},
      </if>
      <if test="cancelReason != null">
        cancel_reason = #{cancelReason,jdbcType=VARCHAR},
      </if>
    </set>
    where param_id = #{paramId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.juma.tgm.task.domain.TaskParam">
    update task_param
    set task_id = #{taskId,jdbcType=INTEGER},
      bill_period = #{billPeriod,jdbcType=INTEGER},
      goods_type = #{goodsType,jdbcType=VARCHAR},
      estimate_mileage_range = #{estimateMileageRange,jdbcType=VARCHAR},
      estimate_time_cost_range = #{estimateTimeCostRange,jdbcType=VARCHAR},
      function_ids = #{functionIds,jdbcType=VARCHAR},
      require_mark = #{requireMark,jdbcType=VARCHAR},
      pricing_method = #{pricingMethod,jdbcType=INTEGER},
      pricing_rule = #{pricingRule,jdbcType=VARCHAR},
      cancel_reason = #{cancelReason,jdbcType=VARCHAR}
    where param_id = #{paramId,jdbcType=INTEGER}
  </update>
  <insert id="insertBatch" keyProperty="paramId" parameterType="java.util.List" useGeneratedKeys="true">
    insert into task_param
    (task_id,bill_period,goods_type,estimate_mileage_range,estimate_time_cost_range,function_ids,require_mark,pricing_method,pricing_rule,cancel_reason) values
    <foreach collection="list" index="index" item="item" separator=",">
      (#{item.taskId},#{item.billPeriod},#{item.goodsType},#{item.estimateMileageRange},#{item.estimateTimeCostRange},#{item.functionIds},#{item.requireMark},#{item.pricingMethod},#{item.pricingRule},#{item.cancelReason})
    </foreach>
  </insert>
  <update id="updateBatchByPrimaryKey" parameterType="java.util.List">
    <foreach close="" collection="list" index="index" item="item" open="" separator=";">
      update task_param
      <set>
        param_id = #{item.paramId},
        task_id = #{item.taskId},
        bill_period = #{item.billPeriod},
        goods_type = #{item.goodsType},
        estimate_mileage_range = #{item.estimateMileageRange},
        estimate_time_cost_range = #{item.estimateTimeCostRange},
        function_ids = #{item.functionIds},
        require_mark = #{item.requireMark},
        pricing_method = #{item.pricingMethod},
        pricing_rule = #{item.pricingRule},
        cancel_reason = #{item.cancelReason},
      </set>
      where param_id = #{item.paramId,jdbcType=INTEGER}
    </foreach>
  </update>
  <update id="updateBatchByPrimaryKeySelective" parameterType="java.util.List">
    <foreach close="" collection="list" index="index" item="item" open="" separator=";">
      update task_param
      <set>
        <if test="item.taskId != null">
          task_id = #{item.taskId,jdbcType=INTEGER},
        </if>
        <if test="item.billPeriod != null">
          bill_period = #{item.billPeriod,jdbcType=INTEGER},
        </if>
        <if test="item.goodsType != null">
          goods_type = #{item.goodsType,jdbcType=VARCHAR},
        </if>
        <if test="item.estimateMileageRange != null">
          estimate_mileage_range = #{item.estimateMileageRange,jdbcType=VARCHAR},
        </if>
        <if test="item.estimateTimeCostRange != null">
          estimate_time_cost_range = #{item.estimateTimeCostRange,jdbcType=VARCHAR},
        </if>
        <if test="item.functionIds != null">
          function_ids = #{item.functionIds,jdbcType=VARCHAR},
        </if>
        <if test="item.requireMark != null">
          require_mark = #{item.requireMark,jdbcType=VARCHAR},
        </if>
        <if test="item.pricingMethod != null">
          pricing_method = #{item.pricingMethod,jdbcType=INTEGER},
        </if>
        <if test="item.pricingRule != null">
          pricing_rule = #{item.pricingRule,jdbcType=VARCHAR},
        </if>
        <if test="item.cancelReason != null">
          cancel_reason = #{item.cancelReason,jdbcType=VARCHAR},
        </if>
      </set>
      where param_id = #{item.paramId,jdbcType=INTEGER}
    </foreach>
  </update>
</mapper>